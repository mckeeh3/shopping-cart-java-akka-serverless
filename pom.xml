<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>io.example</groupId>
  <artifactId>shopping-cart</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>shopping-cart-java-akka-serverless</name>
    <properties>

    <!-- TODO Update to your own Docker repository or Docker Hub scope -->
    <dockerImage>${project.artifactId}</dockerImage>
    <dockerTag>${project.version}</dockerTag>
    <mainClass>io.example.Main</mainClass>

    <jdk.target>11</jdk.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <akkaserverless-sdk.version>0.7.2</akkaserverless-sdk.version>
    <akka-grpc.version>2.1.0</akka-grpc.version>
  </properties>

  <build>
    <resources>
      <!-- Add the generated protobuf descriptor to the classpath, so that source mapping works -->
      <resource>
        <directory>${project.build.directory}/generated-resources</directory>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
      </resource>
    </resources>

    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>1.7.0</version>
      </extension>
    </extensions>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <source>${jdk.target}</source>
          <target>${jdk.target}</target>
          <compilerArgs>
            <arg>-Xlint:deprecation</arg>
          </compilerArgs>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.xolstice.maven.plugins</groupId>
        <artifactId>protobuf-maven-plugin</artifactId>
        <version>0.6.1</version>
        <executions>
          <execution>
            <!-- generate Java code for protobuf types -->
            <id>protobuf</id>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <writeDescriptorSet>true</writeDescriptorSet>
              <includeSourceInfoInDescriptorSet>true</includeSourceInfoInDescriptorSet>
              <descriptorSetFileName>user-function.desc</descriptorSetFileName>
              <checkStaleness>true</checkStaleness>
              <protocArtifact>com.google.protobuf:protoc:3.9.1:exe:${os.detected.classifier}</protocArtifact>
              <protocPlugins>
                <protocPlugin>
                  <id>akka-grpc</id>
                  <groupId>com.lightbend.akka.grpc</groupId>
                  <artifactId>akka-grpc-scalapb-protoc-plugin_2.12</artifactId>
                  <version>${akka-grpc.version}</version>
                  <mainClass>akka.grpc.gen.Main</mainClass>
                </protocPlugin>
              </protocPlugins>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>2.1</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                  <resource>reference.conf</resource>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>${mainClass}</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>0.36.0</version>
        <configuration>
          <images>
            <image>
              <name>${dockerImage}:%l</name>
              <build>
                <!-- Base Docker image which contains jre-->
                <from>docker.io/library/adoptopenjdk:${jdk.target}-jre-hotspot</from>
                <tags>
                  <!-- tag for generated image -->
                  <tag>${dockerTag}</tag>
                </tags>
                <ports>
                  <!-- expose port in Docker container -->
                  <port>8080</port>
                </ports>
                <assembly>
                  <!-- NOTE: (optional) switch to "artifact-with-dependencies" to show dependencies library-->
                  <descriptorRef>artifact</descriptorRef>
                </assembly>
                <entryPoint>
                  <arg>java</arg>
                  <arg>-jar</arg>
                  <arg>/maven/${project.build.finalName}.jar</arg>
                </entryPoint>
              </build>
            </image>
          </images>
        </configuration>
        <executions>
          <execution>
            <id>build-docker-image</id>
            <phase>package</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
          <execution>
            <id>push-docker-image</id>
            <phase>deploy</phase>
            <goals>
              <goal>push</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <execution>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <executable>java</executable>
          <arguments>
            <argument>-classpath</argument>
            <classpath/>
            <argument>${mainClass}</argument>
          </arguments>
          <environmentVariables>
            <!-- needed for the proxy to access the user function on all platforms -->
            <HOST>0.0.0.0</HOST>
          </environmentVariables>
        </configuration>
      </plugin>

      <plugin>
        <!-- configure src/it/java and src/it/resources -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.2.0</version>
        <executions>
          <execution>
            <id>add-integration-test-source</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>src/it/java</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add-integration-test-resource</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>add-test-resource</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>src/it/resources</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.22.2</version>
        <configuration>
          <excludes>
            <!-- ignore integration test classes -->
            <exclude>**/*IntegrationTest</exclude>
          </excludes>
        </configuration>
      </plugin>

      <plugin>
        <groupId>com.akkaserverless</groupId>
        <artifactId>akkaserverless-maven-plugin</artifactId>
        <version>${akkaserverless-sdk.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>generate</goal>
              <goal>deploy</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <dockerImage>${dockerImage}:${dockerTag}</dockerImage>
          <mainClass>${mainClass}</mainClass>
          <integrationTestSourceDirectory>src/it/java</integrationTestSourceDirectory>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>3.0.0-M1</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

    </plugins>
  </build>

  <profiles>
    <profile>
      <!-- run Integration Tests in src/it/java with `mvn verify -Pit`-->
      <id>it</id>
      <build>
        <plugins>
          <plugin>
            <!-- run *IntegrationTest with failsafe -->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>2.22.2</version>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
                <configuration>
                  <includes>
                    <include>**/*IntegrationTest</include>
                  </includes>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <dependencies>
    <dependency>
      <groupId>com.akkaserverless</groupId>
      <artifactId>akkaserverless-java-sdk</artifactId>
      <version>${akkaserverless-sdk.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.2.6</version>
    </dependency>
    <dependency>
      <!-- for JSON formatted logging -->
      <groupId>ch.qos.logback.contrib</groupId>
      <artifactId>logback-json-classic</artifactId>
      <version>0.1.5</version>
    </dependency>
    <dependency>
      <!-- for JSON formatted logging -->
      <groupId>ch.qos.logback.contrib</groupId>
      <artifactId>logback-jackson</artifactId>
      <version>0.1.5</version>
    </dependency>
    <dependency>
      <groupId>com.akkaserverless</groupId>
      <artifactId>akkaserverless-java-sdk-testkit</artifactId>
      <version>${akkaserverless-sdk.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
