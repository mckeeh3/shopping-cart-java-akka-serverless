/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package cartese.entity;

import static org.junit.Assert.*;

import org.junit.Test;

import cartese.api.ShoppingCartEseApi;

public class ShoppingCartEseTest {
  @Test
  public void addItemTest() {
    ShoppingCartEseTestKit testKit = ShoppingCartEseTestKit.of(ShoppingCartEse::new);
    addItem(testKit, "cart-1", "customer-1", "product-1", "product name 1", 1);

    var state = testKit.getState();
    assertEquals("cart-1", state.getCartId());
    assertEquals("customer-1", state.getCustomerId());
    assertEquals(1, state.getItemsList().size());
    assertEquals("product-1", state.getItems(0).getProductId());
    assertEquals("product name 1", state.getItems(0).getName());
    assertEquals(1, state.getItems(0).getQuantity());
  }

  private void addItem(ShoppingCartEseTestKit testKit, String cartId, String customerId, String productId, String productName, int quantity) {
    testKit.addItem(ShoppingCartEseApi.AddLineItem
        .newBuilder()
        .setCartId(cartId)
        .setCustomerId(customerId)
        .setProductId(productId)
        .setName(productName)
        .setQuantity(quantity)
        .build());
  }

  @Test
  public void changeItemTest() {
    ShoppingCartEseTestKit testKit = ShoppingCartEseTestKit.of(ShoppingCartEse::new);
    addItem(testKit, "cart-1", "customer-1", "product-1", "product name 1", 1);
    addItem(testKit, "cart-1", "customer-1", "product-2", "product name 2", 2);
    addItem(testKit, "cart-1", "customer-1", "product-3", "product name 3", 3);

    testKit.changeItem(ShoppingCartEseApi.ChangeLineItemQuantity
        .newBuilder()
        .setCartId("cart-1")
        .setProductId("product-2")
        .setQuantity(234)
        .build());

    var state = testKit.getState();
    assertEquals(234, state.getItems(1).getQuantity());
  }

  @Test
  public void removeItemTest() {
    ShoppingCartEseTestKit testKit = ShoppingCartEseTestKit.of(ShoppingCartEse::new);
    addItem(testKit, "cart-1", "customer-1", "product-1", "product name 1", 1);
    addItem(testKit, "cart-1", "customer-1", "product-2", "product name 2", 2);
    addItem(testKit, "cart-1", "customer-1", "product-3", "product name 3", 3);

    testKit.removeItem(ShoppingCartEseApi.RemoveLineItem
        .newBuilder()
        .setCartId("cart-1")
        .setProductId("product-2")
        .build());

    var state = testKit.getState();
    assertEquals(2, state.getItemsList().size());
  }

  @Test
  public void checkoutCartTest() {
    ShoppingCartEseTestKit testKit = ShoppingCartEseTestKit.of(ShoppingCartEse::new);
    addItem(testKit, "cart-1", "customer-1", "product-1", "product name 1", 1);
    addItem(testKit, "cart-1", "customer-1", "product-2", "product name 2", 2);
    addItem(testKit, "cart-1", "customer-1", "product-3", "product name 3", 3);

    testKit.checkoutCart(ShoppingCartEseApi.CheckoutShoppingCart
        .newBuilder()
        .setCartId("cart-1")
        .build());

    var state = testKit.getState();
    assertTrue(state.getCheckedOut());
  }

  @Test
  public void getCartTest() {
    ShoppingCartEseTestKit testKit = ShoppingCartEseTestKit.of(ShoppingCartEse::new);
    addItem(testKit, "cart-1", "customer-1", "product-1", "product name 1", 1);
    addItem(testKit, "cart-1", "customer-1", "product-2", "product name 2", 2);
    addItem(testKit, "cart-1", "customer-1", "product-3", "product name 3", 3);

    testKit.checkoutCart(ShoppingCartEseApi.CheckoutShoppingCart
        .newBuilder()
        .setCartId("cart-1")
        .build());

    var result = testKit.getCart(ShoppingCartEseApi.GetShoppingCart
        .newBuilder()
        .setCartId("cart-1")
        .build());

    var reply = result.getReply();
    assertEquals("customer-1", reply.getCustomerId());
    assertTrue(reply.getCheckedOut());
    assertEquals(3, reply.getItemsList().size());
  }

  @Test
  public void removeCartTest() {
    ShoppingCartEseTestKit testKit = ShoppingCartEseTestKit.of(ShoppingCartEse::new);
    testKit.removeCart(ShoppingCartEseApi.RemoveShoppingCart
        .newBuilder()
        .setCartId("cart-1")
        .build());

    var state = testKit.getState();
    assertTrue(state.getDeleted());
  }
}
