/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package cartve.entity;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import com.akkaserverless.javasdk.testkit.ValueEntityResult;
import com.google.protobuf.Empty;

import org.junit.Test;

import cartve.api.ShoppingCartVeApi;

public class ShoppingCartVeTest {
  @Test
  public void addItemTest() {
    ShoppingCartVeTestKit testKit = ShoppingCartVeTestKit.of(ShoppingCartVe::new);
    var result = addItem(testKit, "cart-1", "customer-1", "product-1", "product name 1", 1);
    assertTrue(result.isReply());

    var reply = result.getReply();
    assertEquals(Empty.getDefaultInstance(), reply);

    var state = testKit.getState();
    assertEquals("cart-1", state.getCartId());
    assertEquals("customer-1", state.getCustomerId());
    assertEquals(1, state.getItemsList().size());
    assertEquals("product-1", state.getItemsList().get(0).getProductId());
    assertEquals("product name 1", state.getItemsList().get(0).getName());
    assertEquals(1, state.getItemsList().get(0).getQuantity());
  }

  private ValueEntityResult<Empty> addItem(ShoppingCartVeTestKit testKit, String cartId, String customerId, String productId, String productName, int quantity) {
    return testKit.addItem(ShoppingCartVeApi.AddLineItem
        .newBuilder()
        .setCartId(cartId)
        .setCustomerId(customerId)
        .setProductId(productId)
        .setName(productName)
        .setQuantity(quantity)
        .build());
  }

  @Test
  public void changeItemTest() {
    ShoppingCartVeTestKit testKit = ShoppingCartVeTestKit.of(ShoppingCartVe::new);
    assertTrue(addItem(testKit, "cart-1", "customer-1", "product-1", "product name 1", 1).isReply());
    assertTrue(addItem(testKit, "cart-1", "customer-1", "product-2", "product name 2", 2).isReply());
    assertTrue(addItem(testKit, "cart-1", "customer-1", "product-3", "product name 3", 3).isReply());

    var state = testKit.getState();
    assertEquals("cart-1", state.getCartId());

    testKit.changeItem(ShoppingCartVeApi.ChangeLineItemQuantity
        .newBuilder()
        .setCartId(state.getCartId())
        .setProductId("product-2")
        .setQuantity(222)
        .build());

    state = testKit.getState();
    assertEquals(222, state.getItemsList().get(1).getQuantity());
  }

  @Test
  public void removeItemTest() {
    ShoppingCartVeTestKit testKit = ShoppingCartVeTestKit.of(ShoppingCartVe::new);
    assertTrue(addItem(testKit, "cart-1", "customer-1", "product-1", "product name 1", 1).isReply());
    assertTrue(addItem(testKit, "cart-1", "customer-1", "product-2", "product name 2", 2).isReply());
    assertTrue(addItem(testKit, "cart-1", "customer-1", "product-3", "product name 3", 3).isReply());

    testKit.removeItem(ShoppingCartVeApi.RemoveLineItem
        .newBuilder()
        .setCartId("cart-1")
        .setProductId("product-2")
        .build());

    var state = testKit.getState();
    assertEquals(2, state.getItemsList().size());
  }

  @Test
  public void checkoutCartTest() {
    ShoppingCartVeTestKit testKit = ShoppingCartVeTestKit.of(ShoppingCartVe::new);

    var result = testKit.checkoutCart(ShoppingCartVeApi.CheckoutShoppingCart
        .newBuilder()
        .setCartId("cart-1")
        .build());

    assertTrue(result.isError());
    assertTrue(result.getError().length() > 0);

    assertTrue(addItem(testKit, "cart-1", "customer-1", "product-1", "product name 1", 1).isReply());
    assertTrue(addItem(testKit, "cart-1", "customer-1", "product-2", "product name 2", 2).isReply());
    assertTrue(addItem(testKit, "cart-1", "customer-1", "product-3", "product name 3", 3).isReply());

    result = testKit.checkoutCart(ShoppingCartVeApi.CheckoutShoppingCart
        .newBuilder()
        .setCartId("cart-1")
        .build());

    var state = testKit.getState();
    assertTrue(state.getCheckedOut());
  }

  @Test
  public void getCartTest() {
    ShoppingCartVeTestKit testKit = ShoppingCartVeTestKit.of(ShoppingCartVe::new);
    assertTrue(addItem(testKit, "cart-1", "customer-1", "product-1", "product name 1", 1).isReply());
    assertTrue(addItem(testKit, "cart-1", "customer-1", "product-2", "product name 2", 2).isReply());
    assertTrue(addItem(testKit, "cart-1", "customer-1", "product-3", "product name 3", 3).isReply());

    var result = testKit.getCart(ShoppingCartVeApi.GetShoppingCart
        .newBuilder()
        .setCartId("cart-1")
        .build());

    assertTrue(result.isReply());
    var reply = result.getReply();
    assertEquals("customer-1", reply.getCustomerId());
    assertEquals(3, reply.getItemsList().size());
  }

  @Test
  public void removeCartTest() {
    ShoppingCartVeTestKit testKit = ShoppingCartVeTestKit.of(ShoppingCartVe::new);

    testKit.removeCart(ShoppingCartVeApi.RemoveShoppingCart
        .newBuilder()
        .setCartId("cart-1")
        .build());

    var state = testKit.getState();
    assertTrue(state.getDeleted());
  }

}
