syntax = "proto3";

package cartese.view;

import "google/api/annotations.proto";
import "akkaserverless/annotations.proto";
import "cartese/entity/shopping_cart_ese_entity.proto";

option java_outer_classname = "ShoppingCartEseView";

service OrdersByCustomerEseView {
  option (akkaserverless.service) = {
    type: SERVICE_TYPE_VIEW
  };

  rpc UpdateItemAdded(entity.ItemAdded) returns (entity.Cart) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "cart_ese"
    };
    option (akkaserverless.method).view.update = {
      table: "cart_ese"
      transform_updates: true
    };
  }

  rpc UpdateItemChangedQuantity(entity.ItemChangedQuantity) returns (entity.Cart) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "cart_ese"
    };
    option (akkaserverless.method).view.update = {
      table: "cart_ese"
      transform_updates: true
    };
  }

  rpc UpdateItemRemoved(entity.ItemRemoved) returns (entity.Cart) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "cart_ese"
    };
    option (akkaserverless.method).view.update = {
      table: "cart_ese"
      transform_updates: true
    };
  }

  rpc UpdateCheckedOut(entity.CheckedOut) returns (entity.Cart) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "cart_ese"
    };
    option (akkaserverless.method).view.update = {
      table: "cart_ese"
      transform_updates: true
    };
  }

  rpc UpdateCartRemoved(entity.CartRemoved) returns (entity.Cart) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "cart_ese"
    };
    option (akkaserverless.method).view.update = {
      table: "cart_ese"
      transform_updates: true
    };
  }

  rpc GetOrdersByCustomer(GetOrdersByCustomerRequest) returns (CustomerOrdersResponse) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * AS orders FROM cart_ese WHERE customer_id = :customer_id"
    };
    option (google.api.http) = {
      get: "/ese/orders"
    };
  }
}

message GetOrdersByCustomerRequest {
  string customer_id = 1;
}

message CustomerOrdersResponse {
  repeated entity.Cart orders = 1;
}
