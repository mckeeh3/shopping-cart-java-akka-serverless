/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package cartese.view;

import cartese.entity.ShoppingCartEseEntity;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import com.akkaserverless.javasdk.view.ViewContext;

public class OrdersByCustomerEseViewImplView extends AbstractOrdersByCustomerEseViewImplView {

  public OrdersByCustomerEseViewImplView(ViewContext context) {
  }

  @Override
  public ShoppingCartEseEntity.Cart emptyState() {
    return ShoppingCartEseEntity.Cart.newBuilder().build();
  }

  @Override
  public UpdateEffect<ShoppingCartEseEntity.Cart> updateItemAdded(ShoppingCartEseEntity.Cart state, ShoppingCartEseEntity.ItemAdded event) {
    var shoppingCart = ShoppingCart.toShoppingCart(state);
    shoppingCart.handle(event);
    return effects().updateState(shoppingCart.toState());
  }

  @Override
  public UpdateEffect<ShoppingCartEseEntity.Cart> updateItemChangedQuantity(ShoppingCartEseEntity.Cart state, ShoppingCartEseEntity.ItemChangedQuantity event) {
    var shoppingCart = ShoppingCart.toShoppingCart(state);
    shoppingCart.handle(event);
    return effects().updateState(shoppingCart.toState());
  }

  @Override
  public UpdateEffect<ShoppingCartEseEntity.Cart> updateItemRemoved(ShoppingCartEseEntity.Cart state, ShoppingCartEseEntity.ItemRemoved event) {
    var shoppingCart = ShoppingCart.toShoppingCart(state);
    shoppingCart.handle(event);
    return effects().updateState(shoppingCart.toState());
  }

  @Override
  public UpdateEffect<ShoppingCartEseEntity.Cart> updateCheckedOut(ShoppingCartEseEntity.Cart state, ShoppingCartEseEntity.CheckedOut event) {
    var shoppingCart = ShoppingCart.toShoppingCart(state);
    shoppingCart.handle(event);
    return effects().updateState(shoppingCart.toState());
  }

  @Override
  public UpdateEffect<ShoppingCartEseEntity.Cart> updateCartRemoved(ShoppingCartEseEntity.Cart state, ShoppingCartEseEntity.CartRemoved event) {
    var shoppingCart = ShoppingCart.toShoppingCart(state);
    shoppingCart.handle(event);
    return effects().updateState(shoppingCart.toState());
  }

  static class ShoppingCart {
    String customerId;
    String cartId;
    boolean checkedOut;
    boolean deleted;
    Map<String, LineItem> items = new LinkedHashMap<>();

    static class LineItem {
      String productId;
      String name;
      int quantity;

      LineItem(String productId, String name, int quantity) {
        this.productId = productId;
        this.name = name;
        this.quantity = quantity;
      }
    }

    void handle(ShoppingCartEseEntity.ItemAdded event) {
      cartId = event.getCartId();
      customerId = event.getCustomerId();
      items.put(event.getItem().getProductId(), toItem(event.getItem()));
    }

    void handle(ShoppingCartEseEntity.ItemChangedQuantity event) {
      items.computeIfPresent(event.getProductId(), ((key, value) -> new LineItem(key, value.name, event.getQuantity())));
    }

    void handle(ShoppingCartEseEntity.ItemRemoved event) {
      items.remove(event.getProductId());
    }

    void handle(ShoppingCartEseEntity.CheckedOut event) {
      checkedOut = true;
    }

    void handle(ShoppingCartEseEntity.CartRemoved event) {
      deleted = true;
    }

    static ShoppingCart toShoppingCart(Optional<ShoppingCartEseEntity.Cart> state) {
      return toShoppingCart(state.orElse(ShoppingCartEseEntity.Cart.newBuilder().build()));
    }

    static ShoppingCart toShoppingCart(ShoppingCartEseEntity.Cart domain) {
      var cart = new ShoppingCart();
      cart.cartId = domain.getCartId();
      cart.customerId = domain.getCustomerId();
      cart.checkedOut = domain.getCheckedOut();
      cart.deleted = domain.getDeleted();
      domain.getItemsList().forEach(item -> cart.items.put(item.getProductId(), toItem(item)));
      return cart;
    }

    private static LineItem toItem(ShoppingCartEseEntity.LineItem item) {
      return new LineItem(item.getProductId(), item.getName(), item.getQuantity());
    }

    ShoppingCartEseEntity.Cart toState() {
      return ShoppingCartEseEntity.Cart
          .newBuilder()
          .setCartId(cartId)
          .setCustomerId(customerId)
          .setCheckedOut(checkedOut)
          .setDeleted(deleted)
          .addAllItems(items.values().stream().map(item -> toDomainLineItem(item)).collect(Collectors.toList()))
          .build();
    }

    private ShoppingCartEseEntity.LineItem toDomainLineItem(LineItem item) {
      return ShoppingCartEseEntity.LineItem
          .newBuilder()
          .setProductId(item.productId)
          .setName(item.name)
          .setQuantity(item.quantity)
          .build();
    }
  }
}