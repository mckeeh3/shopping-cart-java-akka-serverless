/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package cartese.domain;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntityContext;
import com.google.protobuf.Empty;

import cartese.ShoppingCartEseApi;
import cartese.ShoppingCartEseApi.AddLineItem;
import cartese.ShoppingCartEseApi.ChangeLineItemQuantity;
import cartese.ShoppingCartEseApi.CheckoutShoppingCart;
import cartese.ShoppingCartEseApi.RemoveLineItem;
import cartese.ShoppingCartEseApi.RemoveShoppingCart;
import cartese.domain.ShoppingCartEseDomain.Cart;
import cartese.domain.ShoppingCartEseDomain.CartRemoved;
import cartese.domain.ShoppingCartEseDomain.CheckedOut;
import cartese.domain.ShoppingCartEseDomain.ItemAdded;
import cartese.domain.ShoppingCartEseDomain.ItemChangedQuantity;
import cartese.domain.ShoppingCartEseDomain.ItemRemoved;

public class ShoppingCartEse extends AbstractShoppingCartEse {
  private final String entityId;

  public ShoppingCartEse(EventSourcedEntityContext context) {
    this.entityId = context.entityId();
  }

  @Override
  public ShoppingCartEseDomain.Cart emptyState() {
    return ShoppingCartEseDomain.Cart
        .newBuilder()
        .setCartId(entityId)
        .build();
  }

  @Override
  public Effect<Empty> addItem(ShoppingCartEseDomain.Cart currentState, ShoppingCartEseApi.AddLineItem command) {
    return reject(currentState, command).orElse(handle(currentState, command));
  }

  @Override
  public Effect<Empty> changeItem(ShoppingCartEseDomain.Cart currentState, ShoppingCartEseApi.ChangeLineItemQuantity command) {
    return reject(currentState, command).orElse(handle(currentState, command));
  }

  @Override
  public Effect<Empty> removeItem(ShoppingCartEseDomain.Cart currentState, ShoppingCartEseApi.RemoveLineItem command) {
    return reject(currentState, command).orElse(handle(currentState, command));
  }

  @Override
  public Effect<Empty> checkoutCart(ShoppingCartEseDomain.Cart currentState, ShoppingCartEseApi.CheckoutShoppingCart command) {
    return reject(currentState, command).orElse(handle(currentState, command));
  }

  @Override
  public Effect<ShoppingCartEseApi.Cart> getCart(ShoppingCartEseDomain.Cart currentState, ShoppingCartEseApi.GetShoppingCart command) {
    return handle(currentState);
  }

  @Override
  public Effect<Empty> removeCart(ShoppingCartEseDomain.Cart currentState, ShoppingCartEseApi.RemoveShoppingCart command) {
    return reject(currentState, command).orElse(handle(currentState, command));
  }

  @Override
  public ShoppingCartEseDomain.Cart itemAdded(ShoppingCartEseDomain.Cart currentState, ShoppingCartEseDomain.ItemAdded event) {
    return ShoppingCart
        .toShoppingCart(currentState)
        .handle(event)
        .toState();
  }

  @Override
  public ShoppingCartEseDomain.Cart itemChangedQuantity(ShoppingCartEseDomain.Cart currentState, ShoppingCartEseDomain.ItemChangedQuantity event) {
    return ShoppingCart
        .toShoppingCart(currentState)
        .handle(event)
        .toState();
  }

  @Override
  public ShoppingCartEseDomain.Cart itemRemoved(ShoppingCartEseDomain.Cart currentState, ShoppingCartEseDomain.ItemRemoved event) {
    return ShoppingCart
        .toShoppingCart(currentState)
        .handle(event)
        .toState();
  }

  @Override
  public ShoppingCartEseDomain.Cart checkedOut(ShoppingCartEseDomain.Cart currentState, ShoppingCartEseDomain.CheckedOut event) {
    return ShoppingCart
        .toShoppingCart(currentState)
        .handle(event)
        .toState();
  }

  @Override
  public ShoppingCartEseDomain.Cart cartRemoved(ShoppingCartEseDomain.Cart currentState, ShoppingCartEseDomain.CartRemoved event) {
    return ShoppingCart
        .toShoppingCart(currentState)
        .handle(event)
        .toState();
  }

  private Optional<Effect<Empty>> reject(Cart currentState, AddLineItem command) {
    var rejected = rejectCheckedOutOrDeleted(currentState);
    if (rejected.isPresent()) {
      return rejected;
    }
    if (command.getCustomerId().isBlank()) {
      return Optional.of(effects().error("CustomerId is required"));
    }
    if (command.getProductId().isBlank()) {
      return Optional.of(effects().error("ProductId is required"));
    }
    if (command.getQuantity() <= 0) {
      return Optional.of(effects().error("Quantity must be greater than 0"));
    }
    return Optional.empty();
  }

  private Optional<Effect<Empty>> reject(Cart currentState, ChangeLineItemQuantity command) {
    var rejected = rejectCheckedOutOrDeleted(currentState);
    if (rejected.isPresent()) {
      return rejected;
    }
    if (command.getProductId().isBlank()) {
      return Optional.of(effects().error("ProductId is required"));
    }
    if (command.getQuantity() <= 0) {
      return Optional.of(effects().error("Quantity must be greater than 0"));
    }
    return Optional.empty();
  }

  private Optional<Effect<Empty>> reject(Cart currentState, RemoveLineItem command) {
    var rejected = rejectCheckedOutOrDeleted(currentState);
    if (rejected.isPresent()) {
      return rejected;
    }
    if (command.getProductId().isBlank()) {
      return Optional.of(effects().error("ProductId is required"));
    }
    return Optional.empty();
  }

  private Optional<Effect<Empty>> reject(Cart currentState, CheckoutShoppingCart command) {
    if (currentState.getDeleted()) {
      return Optional.of(effects().error("Shopping cart has been deleted"));
    }
    if (currentState.getItemsList().size() < 1) {
      return Optional.of(effects().error("Cannot checkout an empty shopping cart"));
    }
    return Optional.empty();
  }

  private Optional<Effect<Empty>> reject(Cart currentState, RemoveShoppingCart command) {
    if (currentState.getCheckedOut()) {
      return Optional.of(effects().error("Shopping cart is already checked out"));
    }
    return Optional.empty();
  }

  private Optional<Effect<Empty>> rejectCheckedOutOrDeleted(Cart cart) {
    if (cart.getCheckedOut()) {
      return Optional.of(effects().error("Cannot modify a checked out cart"));
    }
    if (cart.getDeleted()) {
      return Optional.of(effects().error("Cannot modify a deleted cart"));
    }
    return Optional.empty();
  }

  private Effect<Empty> handle(Cart currentState, AddLineItem command) {
    var lineItem = ShoppingCartEseDomain.LineItem
        .newBuilder()
        .setProductId(command.getProductId())
        .setName(command.getName())
        .setQuantity(command.getQuantity())
        .build();
    var event = ShoppingCartEseDomain.ItemAdded
        .newBuilder()
        .setCartId(command.getCartId())
        .setCustomerId(command.getCustomerId())
        .setItem(lineItem)
        .build();

    return effects()
        .emitEvent(event)
        .thenReply(newState -> Empty.getDefaultInstance());
  }

  private Effect<Empty> handle(Cart currentState, ChangeLineItemQuantity command) {
    var event = ShoppingCartEseDomain.ItemChangedQuantity
        .newBuilder()
        .setProductId(command.getProductId())
        .setQuantity(command.getQuantity())
        .build();

    return effects()
        .emitEvent(event)
        .thenReply(newState -> Empty.getDefaultInstance());
  }

  private Effect<Empty> handle(Cart currentState, RemoveLineItem command) {
    var event = ShoppingCartEseDomain.ItemRemoved
        .newBuilder()
        .setProductId(command.getProductId())
        .build();

    return effects()
        .emitEvent(event)
        .thenReply(newState -> Empty.getDefaultInstance());
  }

  private Effect<Empty> handle(Cart currentState, CheckoutShoppingCart command) {
    var event = ShoppingCartEseDomain.CheckedOut
        .newBuilder()
        .build();

    return effects()
        .emitEvent(event)
        .thenReply(newState -> Empty.getDefaultInstance());
  }

  private Effect<ShoppingCartEseApi.Cart> handle(Cart currentState) {
    return effects().reply(ShoppingCart.toApi(currentState));
  }

  private Effect<Empty> handle(Cart currentState, RemoveShoppingCart command) {
    var event = ShoppingCartEseDomain.CartRemoved
        .newBuilder()
        .build();

    return effects()
        .emitEvent(event)
        .thenReply(newState -> Empty.getDefaultInstance());
  }

  static class ShoppingCart {
    String cartId;
    String customerId;
    boolean checkedOut;
    boolean deleted;
    Map<String, LineItem> items = new LinkedHashMap<>();

    static class LineItem {
      String productId;
      String name;
      int quantity;

      LineItem(String productId, String name, int quantity) {
        this.productId = productId;
        this.name = name;
        this.quantity = quantity;
      }

      static LineItem toLineItem(ShoppingCartEseDomain.LineItem item) {
        return new LineItem(item.getProductId(), item.getName(), item.getQuantity());
      }
    }

    ShoppingCart handle(ItemAdded event) {
      cartId = event.getCartId();
      customerId = event.getCustomerId();
      items.put(event.getItem().getProductId(), LineItem.toLineItem(event.getItem()));
      return this;
    }

    ShoppingCart handle(ItemChangedQuantity event) {
      items.computeIfPresent(event.getProductId(), (key, value) -> new LineItem(key, value.name, event.getQuantity()));
      return this;
    }

    ShoppingCart handle(ItemRemoved event) {
      items.remove(event.getProductId());
      return this;
    }

    ShoppingCart handle(CheckedOut event) {
      checkedOut = true;
      return this;
    }

    ShoppingCart handle(CartRemoved event) {
      deleted = true;
      return this;
    }

    static ShoppingCart toShoppingCart(Cart cart) {
      var shoppingCart = new ShoppingCart();
      shoppingCart.cartId = cart.getCartId();
      shoppingCart.customerId = cart.getCustomerId();
      shoppingCart.checkedOut = cart.getCheckedOut();
      shoppingCart.deleted = cart.getDeleted();
      cart.getItemsList().forEach(item -> shoppingCart.items.put(item.getProductId(), LineItem.toLineItem(item)));
      return shoppingCart;
    }

    ShoppingCartEseDomain.Cart toState() {
      var lineItems = items.values().stream().map(item -> ShoppingCartEseDomain.LineItem
          .newBuilder()
          .setProductId(item.productId)
          .setName(item.name)
          .setQuantity(item.quantity)
          .build())
          .collect(Collectors.toList());
      return ShoppingCartEseDomain.Cart
          .newBuilder()
          .setCartId(cartId)
          .setCustomerId(customerId)
          .setCheckedOut(checkedOut)
          .setDeleted(deleted)
          .addAllItems(lineItems)
          .build();
    }

    static ShoppingCartEseApi.Cart toApi(Cart cart) {
      var lineItems = cart.getItemsList().stream().map(item -> ShoppingCartEseApi.LineItem
          .newBuilder()
          .setProductId(item.getProductId())
          .setName(item.getName())
          .setQuantity(item.getQuantity())
          .build())
          .collect(Collectors.toList());
      return ShoppingCartEseApi.Cart
          .newBuilder()
          .setCustomerId(cart.getCustomerId())
          .setCheckedOut(cart.getCheckedOut())
          .setDeleted(cart.getDeleted())
          .addAllItems(lineItems)
          .build();
    }
  }
}
