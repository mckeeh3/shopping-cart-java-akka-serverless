/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package cartese.entity;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntityContext;
import com.google.protobuf.Empty;

import cartese.api.ShoppingCartEseApi;
import cartese.entity.ShoppingCartEseEntity.Cart;

public class ShoppingCartEse extends AbstractShoppingCartEse {
  private final String entityId;

  public ShoppingCartEse(EventSourcedEntityContext context) {
    this.entityId = context.entityId();
  }

  @Override
  public ShoppingCartEseEntity.Cart emptyState() {
    return ShoppingCartEseEntity.Cart
        .newBuilder()
        .setCartId(entityId)
        .build();
  }

  @Override
  public Effect<Empty> addItem(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.AddLineItem command) {
    return reject(currentState, command).orElseGet(() -> handle(currentState, command));
  }

  @Override
  public Effect<Empty> changeItem(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.ChangeLineItemQuantity command) {
    return reject(currentState, command).orElseGet(() -> handle(currentState, command));
  }

  @Override
  public Effect<Empty> removeItem(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.RemoveLineItem command) {
    return reject(currentState, command).orElseGet(() -> handle(currentState, command));
  }

  @Override
  public Effect<Empty> checkoutCart(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.CheckoutShoppingCart command) {
    return reject(currentState, command).orElseGet(() -> handle(currentState, command));
  }

  @Override
  public Effect<ShoppingCartEseApi.Cart> getCart(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.GetShoppingCart command) {
    return handle(currentState);
  }

  @Override
  public Effect<Empty> removeCart(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.RemoveShoppingCart command) {
    return reject(currentState, command).orElseGet(() -> handle(currentState, command));
  }

  @Override
  public ShoppingCartEseEntity.Cart itemAdded(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseEntity.ItemAdded event) {
    return ShoppingCart
        .fromState(currentState)
        .handle(event)
        .toState();
  }

  @Override
  public ShoppingCartEseEntity.Cart itemChangedQuantity(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseEntity.ItemChangedQuantity event) {
    return ShoppingCart
        .fromState(currentState)
        .handle(event)
        .toState();
  }

  @Override
  public ShoppingCartEseEntity.Cart itemRemoved(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseEntity.ItemRemoved event) {
    return ShoppingCart
        .fromState(currentState)
        .handle(event)
        .toState();
  }

  @Override
  public ShoppingCartEseEntity.Cart checkedOut(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseEntity.CheckedOut event) {
    return ShoppingCart
        .fromState(currentState)
        .handle(event)
        .toState();
  }

  @Override
  public ShoppingCartEseEntity.Cart cartRemoved(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseEntity.CartRemoved event) {
    return ShoppingCart
        .fromState(currentState)
        .handle(event)
        .toState();
  }

  private Optional<Effect<Empty>> reject(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.AddLineItem command) {
    var rejected = rejectCheckedOutOrDeleted(currentState);
    if (rejected.isPresent()) {
      return rejected;
    }
    if (command.getCustomerId().isBlank()) {
      return Optional.of(effects().error("CustomerId is required"));
    }
    if (command.getProductId().isBlank()) {
      return Optional.of(effects().error("ProductId is required"));
    }
    if (command.getQuantity() <= 0) {
      return Optional.of(effects().error("Quantity must be greater than 0"));
    }
    return Optional.empty();
  }

  private Optional<Effect<Empty>> reject(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.ChangeLineItemQuantity command) {
    var rejected = rejectCheckedOutOrDeleted(currentState);
    if (rejected.isPresent()) {
      return rejected;
    }
    if (command.getProductId().isBlank()) {
      return Optional.of(effects().error("ProductId is required"));
    }
    if (command.getQuantity() <= 0) {
      return Optional.of(effects().error("Quantity must be greater than 0"));
    }
    return Optional.empty();
  }

  private Optional<Effect<Empty>> reject(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.RemoveLineItem command) {
    var rejected = rejectCheckedOutOrDeleted(currentState);
    if (rejected.isPresent()) {
      return rejected;
    }
    if (command.getProductId().isBlank()) {
      return Optional.of(effects().error("ProductId is required"));
    }
    return Optional.empty();
  }

  private Optional<Effect<Empty>> reject(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.CheckoutShoppingCart command) {
    if (currentState.getDeleted()) {
      return Optional.of(effects().error("Shopping cart has been deleted"));
    }
    if (currentState.getItemsList().size() < 1) {
      return Optional.of(effects().error("Cannot checkout an empty shopping cart"));
    }
    return Optional.empty();
  }

  private Optional<Effect<Empty>> reject(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.RemoveShoppingCart command) {
    if (currentState.getCheckedOut()) {
      return Optional.of(effects().error("Shopping cart is already checked out"));
    }
    return Optional.empty();
  }

  private Optional<Effect<Empty>> rejectCheckedOutOrDeleted(ShoppingCartEseEntity.Cart cart) {
    if (cart.getCheckedOut()) {
      return Optional.of(effects().error("Cannot modify a checked out cart"));
    }
    if (cart.getDeleted()) {
      return Optional.of(effects().error("Cannot modify a deleted cart"));
    }
    return Optional.empty();
  }

  private Effect<Empty> handle(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.AddLineItem command) {
    var lineItem = ShoppingCartEseEntity.LineItem
        .newBuilder()
        .setProductId(command.getProductId())
        .setName(command.getName())
        .setQuantity(command.getQuantity())
        .build();
    var event = ShoppingCartEseEntity.ItemAdded
        .newBuilder()
        .setCartId(command.getCartId())
        .setCustomerId(command.getCustomerId())
        .setItem(lineItem)
        .build();

    return effects()
        .emitEvent(event)
        .thenReply(newState -> Empty.getDefaultInstance());
  }

  private Effect<Empty> handle(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.ChangeLineItemQuantity command) {
    var event = ShoppingCartEseEntity.ItemChangedQuantity
        .newBuilder()
        .setProductId(command.getProductId())
        .setQuantity(command.getQuantity())
        .build();

    return effects()
        .emitEvent(event)
        .thenReply(newState -> Empty.getDefaultInstance());
  }

  private Effect<Empty> handle(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.RemoveLineItem command) {
    var event = ShoppingCartEseEntity.ItemRemoved
        .newBuilder()
        .setProductId(command.getProductId())
        .build();

    return effects()
        .emitEvent(event)
        .thenReply(newState -> Empty.getDefaultInstance());
  }

  private Effect<Empty> handle(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.CheckoutShoppingCart command) {
    var event = ShoppingCartEseEntity.CheckedOut
        .newBuilder()
        .build();

    return effects()
        .emitEvent(event)
        .thenReply(newState -> Empty.getDefaultInstance());
  }

  private Effect<ShoppingCartEseApi.Cart> handle(ShoppingCartEseEntity.Cart currentState) {
    return effects().reply(toApi(currentState));
  }

  private Effect<Empty> handle(ShoppingCartEseEntity.Cart currentState, ShoppingCartEseApi.RemoveShoppingCart command) {
    var event = ShoppingCartEseEntity.CartRemoved
        .newBuilder()
        .build();

    return effects()
        .emitEvent(event)
        .thenReply(newState -> Empty.getDefaultInstance());
  }

  static ShoppingCartEseApi.Cart toApi(ShoppingCartEseEntity.Cart state) {
    var lineItems = state.getItemsList().stream().map(item -> ShoppingCartEseApi.LineItem
        .newBuilder()
        .setProductId(item.getProductId())
        .setName(item.getName())
        .setQuantity(item.getQuantity())
        .build())
        .collect(Collectors.toList());
    return ShoppingCartEseApi.Cart
        .newBuilder()
        .setCustomerId(state.getCustomerId())
        .setCheckedOut(state.getCheckedOut())
        .setDeleted(state.getDeleted())
        .addAllItems(lineItems)
        .build();
  }

  static class ShoppingCart {
    private Cart state;
    Map<String, ShoppingCartEseEntity.LineItem> lineItems = new LinkedHashMap<>();

    ShoppingCart(Cart cart) {
      this.state = cart;
      state.getItemsList().forEach(item -> lineItems.put(item.getProductId(), item));
    }

    ShoppingCart handle(ShoppingCartEseEntity.ItemAdded event) {
      lineItems.computeIfPresent(event.getItem().getProductId(),
          (productId, lineItem) -> lineItem
              .toBuilder()
              .setQuantity(lineItem.getQuantity() + event.getItem().getQuantity())
              .build());
      lineItems.computeIfAbsent(event.getItem().getProductId(),
          productId -> ShoppingCartEseEntity.LineItem
              .newBuilder()
              .setProductId(event.getItem().getProductId())
              .setName(event.getItem().getName())
              .setQuantity(event.getItem().getQuantity())
              .build());
      state = state.toBuilder()
          .setCartId(event.getCartId())
          .setCustomerId(event.getCustomerId())
          .clearItems()
          .addAllItems(lineItems.values())
          .build();
      return this;
    }

    ShoppingCart handle(ShoppingCartEseEntity.ItemChangedQuantity event) {
      lineItems.computeIfPresent(event.getProductId(), (productId, item) -> item
          .toBuilder()
          .setQuantity(event.getQuantity())
          .build());
      state = state.toBuilder()
          .clearItems()
          .addAllItems(lineItems.values())
          .build();
      return this;
    }

    ShoppingCart handle(ShoppingCartEseEntity.ItemRemoved event) {
      lineItems.remove(event.getProductId());
      state = state.toBuilder()
          .clearItems()
          .addAllItems(lineItems.values())
          .build();
      return this;
    }

    ShoppingCart handle(ShoppingCartEseEntity.CheckedOut event) {
      state = state
          .toBuilder()
          .setCheckedOut(true)
          .build();
      return this;
    }

    ShoppingCart handle(ShoppingCartEseEntity.CartRemoved event) {
      state = state
          .toBuilder()
          .setDeleted(true)
          .build();
      return this;
    }

    static ShoppingCart fromState(ShoppingCartEseEntity.Cart state) {
      return new ShoppingCart(state);
    }

    ShoppingCartEseEntity.Cart toState() {
      return state
          .toBuilder()
          .clearItems()
          .addAllItems(lineItems.values())
          .build();
    }
  }
}
